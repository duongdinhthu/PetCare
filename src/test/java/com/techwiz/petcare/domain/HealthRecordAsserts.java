package com.techwiz.petcare.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HealthRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthRecordAllPropertiesEquals(HealthRecord expected, HealthRecord actual) {
        assertHealthRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertHealthRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthRecordAllUpdatablePropertiesEquals(HealthRecord expected, HealthRecord actual) {
        assertHealthRecordUpdatableFieldsEquals(expected, actual);
        assertHealthRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthRecordAutoGeneratedPropertiesEquals(HealthRecord expected, HealthRecord actual) {
        assertThat(actual)
            .as("Verify HealthRecord auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthRecordUpdatableFieldsEquals(HealthRecord expected, HealthRecord actual) {
        assertThat(actual)
            .as("Verify HealthRecord relevant properties")
            .satisfies(a -> assertThat(a.getPetId()).as("check petId").isEqualTo(expected.getPetId()))
            .satisfies(a -> assertThat(a.getVetId()).as("check vetId").isEqualTo(expected.getVetId()))
            .satisfies(a -> assertThat(a.getApptId()).as("check apptId").isEqualTo(expected.getApptId()))
            .satisfies(a -> assertThat(a.getDiagnosis()).as("check diagnosis").isEqualTo(expected.getDiagnosis()))
            .satisfies(a -> assertThat(a.getTreatment()).as("check treatment").isEqualTo(expected.getTreatment()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthRecordUpdatableRelationshipsEquals(HealthRecord expected, HealthRecord actual) {
        // empty method
    }
}
